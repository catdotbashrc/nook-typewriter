#!/bin/bash
# Metadata Substitution System for JoKernel
# Applies project configuration to source files

set -euo pipefail

# Script location
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Configuration files
PROJECT_CONF="${PROJECT_ROOT}/project.conf"
BUILD_CONF="${PROJECT_ROOT}/build.conf"

# Check if configuration files exist
if [ ! -f "$PROJECT_CONF" ]; then
    echo "Error: project.conf not found at $PROJECT_CONF"
    exit 1
fi

if [ ! -f "$BUILD_CONF" ]; then
    echo "Error: build.conf not found at $BUILD_CONF"
    exit 1
fi

# Source configuration files
source "$PROJECT_CONF"
source "$BUILD_CONF"

# Colors for output (if terminal supports it)
if [ -t 1 ]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    NC='\033[0m' # No Color
else
    RED=''
    GREEN=''
    YELLOW=''
    NC=''
fi

# Function to print colored output
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Generate timestamp
BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
BUILD_TIMESTAMP=$(date +%s)

# Get Git information if in a git repository
if git rev-parse --git-dir > /dev/null 2>&1; then
    GIT_COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
    GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
    GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")
    GIT_DIRTY=$(git diff --quiet 2>/dev/null || echo "true")
else
    GIT_COMMIT="not-in-git"
    GIT_BRANCH="not-in-git"
    GIT_TAG=""
    GIT_DIRTY="false"
fi

# Create list of all substitution variables
declare -A SUBSTITUTIONS=(
    # Project Identity
    ["@@PROJECT_NAME@@"]="$PROJECT_NAME"
    ["@@PROJECT_CODENAME@@"]="$PROJECT_CODENAME"
    ["@@PROJECT_TAGLINE@@"]="$PROJECT_TAGLINE"
    ["@@PROJECT_VERSION@@"]="$PROJECT_VERSION"
    ["@@PROJECT_STAGE@@"]="$PROJECT_STAGE"
    ["@@PROJECT_PHILOSOPHY@@"]="$PROJECT_PHILOSOPHY"
    ["@@VERSION_STRING@@"]="$VERSION_STRING"
    
    # Legal
    ["@@COPYRIGHT_HOLDER@@"]="$COPYRIGHT_HOLDER"
    ["@@COPYRIGHT_YEARS@@"]="$COPYRIGHT_YEARS"
    ["@@LICENSE@@"]="$LICENSE"
    ["@@LICENSE_FULL@@"]="$LICENSE_FULL"
    ["@@AUTHOR_NAME@@"]="$AUTHOR_NAME"
    ["@@MAINTAINER_NAME@@"]="$MAINTAINER_NAME"
    ["@@MAINTAINER_EMAIL@@"]="$MAINTAINER_EMAIL"
    ["@@PROJECT_URL@@"]="$PROJECT_URL"
    
    # Hardware
    ["@@DEVICE_NAME@@"]="$DEVICE_NAME"
    ["@@DEVICE_CODENAME@@"]="$DEVICE_CODENAME"
    ["@@CPU_ARCH@@"]="$CPU_ARCH"
    ["@@CPU_MODEL@@"]="$CPU_MODEL"
    ["@@BOARD_NAME@@"]="$BOARD_NAME"
    
    # Kernel
    ["@@KERNEL_VERSION@@"]="$KERNEL_VERSION"
    ["@@KERNEL_BASE@@"]="$KERNEL_BASE"
    ["@@MODULE_PREFIX@@"]="$MODULE_PREFIX"
    
    # Paths
    ["@@INSTALL_PREFIX@@"]="$INSTALL_PREFIX"
    ["@@MODULE_INSTALL_PATH@@"]="$MODULE_INSTALL_PATH"
    ["@@CONFIG_INSTALL_PATH@@"]="$CONFIG_INSTALL_PATH"
    ["@@DATA_INSTALL_PATH@@"]="$DATA_INSTALL_PATH"
    ["@@MANUSCRIPT_PATH@@"]="$MANUSCRIPT_PATH"
    
    # Branding
    ["@@JESTER_NAME@@"]="$JESTER_NAME"
    ["@@BOOT_MOTTO@@"]="$BOOT_MOTTO"
    ["@@SUCCESS_PREFIX@@"]="$SUCCESS_PREFIX"
    ["@@ERROR_PREFIX@@"]="$ERROR_PREFIX"
    
    # Build Info
    ["@@BUILD_DATE@@"]="$BUILD_DATE"
    ["@@BUILD_TIMESTAMP@@"]="$BUILD_TIMESTAMP"
    ["@@GIT_COMMIT@@"]="$GIT_COMMIT"
    ["@@GIT_BRANCH@@"]="$GIT_BRANCH"
    ["@@GIT_TAG@@"]="$GIT_TAG"
)

# Function to apply substitutions to a file
apply_substitutions() {
    local input_file="$1"
    local output_file="${2:-$1}"  # Default to in-place if no output specified
    local temp_file="${output_file}.tmp"
    
    # Skip binary files
    if file "$input_file" | grep -q "binary\|executable"; then
        print_warn "Skipping binary file: $input_file"
        return 0
    fi
    
    # Copy input to temp file
    cp "$input_file" "$temp_file"
    
    # Apply each substitution
    for placeholder in "${!SUBSTITUTIONS[@]}"; do
        value="${SUBSTITUTIONS[$placeholder]}"
        # Escape special characters in the replacement value  
        escaped_value=$(printf '%s\n' "$value" | sed 's/[[\.*^$()+?{|]/\\&/g')
        # Use word boundaries to avoid partial replacements
        sed -i "s|${placeholder}|${escaped_value}|g" "$temp_file"
    done
    
    # Move temp file to output
    mv "$temp_file" "$output_file"
    
    print_info "Processed: $(basename "$input_file")"
}

# Function to create a version header file
create_version_header() {
    local output_file="${1:-${PROJECT_ROOT}/firmware/boot/version.h}"
    
    cat > "$output_file" << EOF
/*
 * Automatically generated version information
 * DO NOT EDIT - Generated by apply_metadata.sh
 * Generated: $BUILD_DATE
 */

#ifndef _JOKEROS_VERSION_H
#define _JOKEROS_VERSION_H

#define JOKEROS_VERSION         "$PROJECT_VERSION"
#define JOKEROS_VERSION_MAJOR   $VERSION_MAJOR
#define JOKEROS_VERSION_MINOR   $VERSION_MINOR
#define JOKEROS_VERSION_PATCH   $VERSION_PATCH
#define JOKEROS_VERSION_STRING  "$VERSION_STRING"

#define JOKEROS_PROJECT_NAME    "$PROJECT_NAME"
#define JOKEROS_CODENAME        "$PROJECT_CODENAME"
#define JOKEROS_STAGE           "$PROJECT_STAGE"

#define JOKEROS_BUILD_DATE      "$BUILD_DATE"
#define JOKEROS_BUILD_TIMESTAMP $BUILD_TIMESTAMP
#define JOKEROS_GIT_COMMIT      "$GIT_COMMIT"
#define JOKEROS_GIT_BRANCH      "$GIT_BRANCH"

#define JOKEROS_COPYRIGHT       "$COPYRIGHT_HOLDER"
#define JOKEROS_LICENSE         "$LICENSE"
#define JOKEROS_AUTHOR          "$AUTHOR_NAME"

#define JOKEROS_KERNEL_VERSION  "$KERNEL_VERSION"
#define JOKEROS_TARGET_DEVICE   "$DEVICE_NAME"
#define JOKEROS_CPU_ARCH        "$CPU_ARCH"

#endif /* _JOKEROS_VERSION_H */
EOF
    
    print_info "Generated version header: $output_file"
}

# Main execution
main() {
    local mode="${1:-apply}"
    local target="${2:-.}"
    
    case "$mode" in
        apply)
            print_info "Applying metadata substitutions..."
            
            # Find all eligible files
            if [ -f "$target" ]; then
                # Single file mode
                apply_substitutions "$target"
            elif [ -d "$target" ]; then
                # Directory mode - process all text files
                find "$target" -type f \( \
                    -name "*.sh" -o \
                    -name "*.c" -o \
                    -name "*.h" -o \
                    -name "*.md" -o \
                    -name "*.txt" -o \
                    -name "*.conf" -o \
                    -name "*.vim" \
                \) -print0 | while IFS= read -r -d '' file; do
                    apply_substitutions "$file"
                done
            else
                print_error "Target not found: $target"
                exit 1
            fi
            ;;
            
        header)
            # Generate version header only
            create_version_header "$target"
            ;;
            
        show)
            # Display current configuration
            print_info "Current configuration:"
            echo "----------------------------------------"
            for key in "${!SUBSTITUTIONS[@]}"; do
                printf "%-30s = %s\n" "$key" "${SUBSTITUTIONS[$key]}"
            done | sort
            echo "----------------------------------------"
            ;;
            
        template)
            # Create a template file with placeholders
            cat > "${target:-template.txt}" << 'EOF'
# @@PROJECT_NAME@@ Configuration Template
# Version: @@PROJECT_VERSION@@
# Copyright (C) @@COPYRIGHT_YEARS@@ @@COPYRIGHT_HOLDER@@
# License: @@LICENSE@@
# 
# Device: @@DEVICE_NAME@@ (@@DEVICE_CODENAME@@)
# Kernel: @@KERNEL_VERSION@@
# Build Date: @@BUILD_DATE@@
# Git Commit: @@GIT_COMMIT@@
#
# @@PROJECT_TAGLINE@@
# @@PROJECT_PHILOSOPHY@@
EOF
            print_info "Created template file: ${target:-template.txt}"
            ;;
            
        *)
            echo "Usage: $0 [apply|header|show|template] [target]"
            echo ""
            echo "Modes:"
            echo "  apply   - Apply substitutions to file(s) (default)"
            echo "  header  - Generate version header file"
            echo "  show    - Display current configuration"
            echo "  template - Create a template file with placeholders"
            echo ""
            echo "Examples:"
            echo "  $0 apply firmware/boot/  # Process all files in directory"
            echo "  $0 apply script.sh        # Process single file"
            echo "  $0 header version.h       # Generate version header"
            echo "  $0 show                   # Show all substitutions"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"