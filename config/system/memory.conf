#!/bin/sh
# JesterOS Memory Configuration - Realistic Targets
# Based on actual Nook SimpleTouch hardware constraints

# Total System Memory
TOTAL_MEMORY_KB=262144  # 256MB

# System Reserved Memory (Cannot touch)
ANDROID_BASE_KB=81920   # 80MB - Android 2.1 minimum
KERNEL_OVERHEAD_KB=20480 # 20MB - Linux 2.6.29
SYSTEM_SERVICES_KB=30720 # 30MB - Android daemons
CACHE_BUFFERS_KB=20480   # 20MB - Required for stability

# Available for Applications
USERSPACE_TOTAL_KB=102400 # ~100MB realistic available

# Service Memory Budget (Realistic)
SERVICE_MEMORY_BUDGET_KB=8192  # 8MB total for all services
PER_SERVICE_BASE_KB=1024       # 1MB base overhead per shell process

# Individual Service Limits (KB)
JESTER_DAEMON_LIMIT=2048        # 2MB
TRACKER_DAEMON_LIMIT=2048       # 2MB  
MENU_SYSTEM_LIMIT=3072          # 3MB
UNIFIED_MONITOR_LIMIT=2048      # 2MB (replaces separate monitors)

# Memory Thresholds (KB)
MEMORY_CRITICAL=10240           # 10MB - Emergency mode
MEMORY_WARNING=20480            # 20MB - Reduce services
MEMORY_COMFORTABLE=30720        # 30MB - Normal operation
MEMORY_OPTIMAL=40960            # 40MB - All features enabled

# Emergency Actions
EMERGENCY_ACTIONS="stop_monitors suspend_tracker clear_caches"
WARNING_ACTIONS="pause_animations reduce_refresh limit_services"

# OOM Prevention
OOM_SCORE_JESTER=-500           # Try to keep alive
OOM_SCORE_MENU=-300             # Important
OOM_SCORE_TRACKER=-100          # Nice to have
OOM_SCORE_MONITORS=100          # First to go

# Cleanup Intervals (seconds)
CLEANUP_INTERVAL=300            # 5 minutes - normal cleanup
FORCE_CLEANUP_INTERVAL=3600     # 1 hour - aggressive cleanup
EMERGENCY_CLEANUP_DELAY=0       # Immediate when critical

# Service Priorities (lower number = higher priority)
PRIORITY_CORE=1                 # Boot essential
PRIORITY_JESTER=10              # Core experience
PRIORITY_MENU=20                # User interface
PRIORITY_TRACKER=30             # Writing stats
PRIORITY_MONITORS=40            # Hardware monitoring

# Memory Check Intervals
CHECK_INTERVAL_NORMAL=60        # 1 minute when comfortable
CHECK_INTERVAL_WARNING=30       # 30 seconds when low
CHECK_INTERVAL_CRITICAL=5       # 5 seconds when critical

# Functions for memory management
get_free_memory() {
    awk '/MemAvailable:/ {print $2}' /proc/meminfo 2>/dev/null || \
    awk '/MemFree:/ {print $2}' /proc/meminfo
}

check_memory_status() {
    local free_kb=$(get_free_memory)
    
    if [ "$free_kb" -lt "$MEMORY_CRITICAL" ]; then
        echo "CRITICAL"
    elif [ "$free_kb" -lt "$MEMORY_WARNING" ]; then
        echo "WARNING"
    elif [ "$free_kb" -lt "$MEMORY_COMFORTABLE" ]; then
        echo "LOW"
    else
        echo "OK"
    fi
}

# Emergency memory cleanup
emergency_cleanup() {
    local level="${1:-1}"
    echo "EMERGENCY: Freeing memory (Level $level)..."
    
    case $level in
        1)  # Warning level - gentle cleanup
            echo "Level 1: Clearing caches..."
            sync
            echo 1 > /proc/sys/vm/drop_caches 2>/dev/null || true
            # Clear temp files
            rm -f /tmp/jesteros_* 2>/dev/null || true
            ;;
        2)  # Critical level - suspend services
            echo "Level 2: Suspending non-essential services..."
            killall -STOP temperature-monitor 2>/dev/null || true
            killall -STOP battery-monitor 2>/dev/null || true
            killall -STOP tracker-daemon 2>/dev/null || true
            sync
            echo 2 > /proc/sys/vm/drop_caches 2>/dev/null || true
            ;;
        3)  # Emergency level - aggressive cleanup
            echo "Level 3: Emergency cleanup..."
            # Stop all monitoring
            killall -TERM temperature-monitor battery-monitor 2>/dev/null || true
            killall -STOP jester-daemon tracker-daemon 2>/dev/null || true
            # Clear all caches
            sync
            echo 3 > /proc/sys/vm/drop_caches 2>/dev/null || true
            # Kill largest process if needed
            if [ $(get_free_memory) -lt 5120 ]; then
                # Find and kill largest non-essential process
                local biggest=$(ps aux | grep -v "\[" | sort -nrk 6 | head -1 | awk '{print $2}')
                [ -n "$biggest" ] && kill -TERM "$biggest" 2>/dev/null || true
            fi
            ;;
    esac
    
    # Force garbage collection in shell
    unset ${!TEMP_*} ${!TMP_*} ${!CACHE_*}
    
    # Report freed memory
    local free_after=$(get_free_memory)
    echo "Memory freed. Available: ${free_after}KB"
}

# Continuous memory monitoring
monitor_memory() {
    local check_interval=$CHECK_INTERVAL_NORMAL
    
    while true; do
        local free_kb=$(get_free_memory)
        local status=$(check_memory_status)
        
        case $status in
            CRITICAL)
                emergency_cleanup 3
                check_interval=$CHECK_INTERVAL_CRITICAL
                ;;
            WARNING)
                emergency_cleanup 2
                check_interval=$CHECK_INTERVAL_WARNING
                ;;
            LOW)
                emergency_cleanup 1
                check_interval=$CHECK_INTERVAL_WARNING
                ;;
            OK)
                check_interval=$CHECK_INTERVAL_NORMAL
                ;;
        esac
        
        # Log status
        echo "$(date '+%Y-%m-%d %H:%M:%S') Memory: ${free_kb}KB free, Status: $status" >> /var/log/jesteros/memory.log
        
        sleep $check_interval
    done
}

# Export all variables for use in other scripts
export TOTAL_MEMORY_KB ANDROID_BASE_KB KERNEL_OVERHEAD_KB
export SERVICE_MEMORY_BUDGET_KB PER_SERVICE_BASE_KB
export MEMORY_CRITICAL MEMORY_WARNING MEMORY_COMFORTABLE
export -f get_free_memory check_memory_status emergency_cleanup

# Auto-monitor memory if sourced with monitor flag
if [ "${1:-}" = "monitor" ]; then
    monitor_memory &
fi