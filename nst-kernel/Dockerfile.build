# QuillKernel Full Build Environment
# Compiles the kernel and creates uImage for Nook

FROM debian:11-slim AS builder

# Install all required packages
RUN apt-get update && apt-get install -y \
    # Essential build tools
    build-essential \
    bc \
    bison \
    flex \
    libssl-dev \
    libncurses5-dev \
    # Cross compilation for ARM
    gcc-arm-linux-gnueabi \
    g++-arm-linux-gnueabi \
    # U-Boot tools for uImage
    u-boot-tools \
    # Git and patch utils
    git \
    patch \
    # Testing and analysis
    sparse \
    cppcheck \
    # Python for kernel scripts
    python3 \
    python3-pip \
    # Useful utilities
    wget \
    curl \
    rsync \
    cpio \
    kmod \
    file \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for building
RUN useradd -m -s /bin/bash builder && \
    echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

USER builder
WORKDIR /home/builder

# Copy kernel source
COPY --chown=builder:builder . /home/builder/nst-kernel/

WORKDIR /home/builder/nst-kernel

# Apply QuillKernel patches
RUN echo "Applying QuillKernel patches..." && \
    ./squire-kernel-patch.sh

# Set up environment for cross-compilation
ENV ARCH=arm
ENV CROSS_COMPILE=arm-linux-gnueabi-
ENV LOADADDR=0x80008000

# Build the kernel
WORKDIR /home/builder/nst-kernel/src

# Configure kernel
RUN echo "Configuring QuillKernel..." && \
    make quill_typewriter_defconfig

# Optional: Enable additional debugging
RUN echo "Enabling test configurations..." && \
    ./scripts/config --enable CONFIG_KUNIT && \
    ./scripts/config --enable CONFIG_DEBUG_FS && \
    ./scripts/config --enable CONFIG_MAGIC_SYSRQ

# Build kernel image
RUN echo "Building QuillKernel (this will take time)..." && \
    make -j$(nproc) uImage modules

# Verify build output
RUN echo "Verifying build output..." && \
    ls -la arch/arm/boot/uImage && \
    file arch/arm/boot/uImage && \
    echo "Build successful!"

# Stage 2: Test environment
FROM debian:11-slim AS tester

# Install runtime test dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    bc \
    file \
    && rm -rf /var/lib/apt/lists/*

# Copy built kernel and test scripts
COPY --from=builder /home/builder/nst-kernel/src/arch/arm/boot/uImage /kernel/uImage
COPY --from=builder /home/builder/nst-kernel/test /tests/

WORKDIR /tests

# Run tests by default
CMD ["bash", "-c", "./verify-build-simple.sh && echo 'Kernel image at /kernel/uImage'"]