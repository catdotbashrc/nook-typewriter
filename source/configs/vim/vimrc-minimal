" Ultra-Minimal Vim Configuration for Nook E-Ink Typewriter
" Optimized for 256MB RAM and E-Ink display
" No plugins - pure Vim functionality only

" === CORE SETTINGS ===
set nocompatible              " Use Vim settings, not Vi
set encoding=utf-8            " UTF-8 encoding
set fileencoding=utf-8
set ttyfast                   " Fast terminal connection
set lazyredraw               " Don't redraw during macros (E-Ink friendly)
set updatetime=300000        " Auto-save every 5 minutes

" === DISPLAY OPTIMIZATION FOR E-INK ===
syntax off                    " Disable syntax (saves RAM, better for E-Ink)
set background=light          " Light background for E-Ink
set t_Co=2                   " Monochrome mode
highlight Normal ctermbg=white ctermfg=black
highlight LineNr ctermfg=gray
highlight SpellBad cterm=underline

" === WRITING SETTINGS ===
set wrap                      " Wrap lines
set linebreak                " Wrap at word boundaries
set textwidth=0              " No hard wrapping
set wrapmargin=0
set formatoptions=l          " Don't auto-format
set spell spelllang=en_us    " Enable spell checking
set spellsuggest=best,10     " Limit spell suggestions

" === INTERFACE ===
set number                    " Show line numbers
set ruler                    " Show cursor position
set laststatus=1             " Minimal status line
set showcmd                  " Show command being typed
set noshowmode               " Don't show mode (saves space)
set shortmess+=I             " No intro message

" === EDITOR BEHAVIOR ===
set backspace=indent,eol,start  " Sensible backspace
set autoindent               " Auto indent new lines
set expandtab                " Use spaces not tabs
set tabstop=2                " 2 spaces per tab
set shiftwidth=2
set hidden                   " Allow hidden buffers
set noswapfile              " No swap files
set nobackup                " No backup files
set nowritebackup
set noundofile              " No undo files (saves RAM)

" === SEARCH ===
set ignorecase              " Case insensitive search
set smartcase               " Unless uppercase used
set incsearch               " Incremental search
set hlsearch                " Highlight search results

" === KEY MAPPINGS (F-keys for simplicity) ===
" F2: New timestamped note
nnoremap <F2> :e ~/notes/<C-R>=strftime("%Y%m%d%H%M%S")<CR>.txt<CR>
" F3: Save
nnoremap <F3> :w<CR>
inoremap <F3> <Esc>:w<CR>a
" F4: Quit
nnoremap <F4> :q<CR>
" F5: Toggle spell check
nnoremap <F5> :set spell!<CR>
" F6: Word count
nnoremap <F6> :echo "Words:" . system("wc -w " . expand("%"))<CR>
" F7: Insert date/time
nnoremap <F7> "=strftime("%Y-%m-%d %H:%M")<CR>P
inoremap <F7> <C-R>=strftime("%Y-%m-%d %H:%M")<CR>

" Familiar shortcuts for writers
nnoremap <C-s> :w<CR>
inoremap <C-s> <Esc>:w<CR>a
nnoremap <C-q> :q<CR>

" Clear search highlighting with Escape
nnoremap <Esc> :nohlsearch<CR>

" === AUTO COMMANDS ===
" Auto-save on focus lost or after inactivity
autocmd CursorHold,CursorHoldI * silent! update
autocmd BufLeave,FocusLost * silent! wall

" Start in insert mode for new files
autocmd BufNewFile *.txt,*.md startinsert

" === SIMPLE WORD COUNT IN STATUS ===
set statusline=%f\ %m%r%h%w\ [%l,%c]\ [%p%%]\ Words:%{WordCount()}

function! WordCount()
  let s:old_status = v:statusmsg
  let position = getpos(".")
  exe ":silent normal g\<c-g>"
  let stat = v:statusmsg
  let s:word_count = 0
  if stat != ''
    if stat =~ "^Selected"
      let s:word_count = str2nr(split(v:statusmsg)[5])
    else
      let s:word_count = str2nr(split(v:statusmsg)[11])
    endif
  end
  let v:statusmsg = s:old_status
  call setpos('.', position)
  return s:word_count
endfunction

" === WRITING HELPERS (No plugins needed) ===
" Check for weasel words
command! Weasel :execute '/%\c\<\(many\|various\|very\|fairly\|several\|extremely\|exceedingly\|quite\|remarkably\|few\|surprisingly\|mostly\|largely\|huge\|tiny\|excellent\|interestingly\|significantly\|substantially\|clearly\|vast\|relatively\|completely\)\>/'

" Check for passive voice
command! Passive :execute '/%\c\(was\|were\|been\|is\|are\|be\|being\|get\|gets\|got\|gotten\|getting\)\s\+\w\+ed\>/'

" Find duplicate words
command! Dups :execute '/\v<(\w+)\s+\1>'

" === QUICK ACCESS TO NOTES ===
nnoremap <Leader>n :e ~/notes/<CR>
nnoremap <Leader>d :e ~/drafts/<CR>

" === MINIMAL STARTUP MESSAGE ===
echo "Ready to write. F3=Save F4=Quit F5=Spell F6=WordCount"