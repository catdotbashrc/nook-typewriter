#!/bin/sh
### BEGIN INIT INFO
# Provides:          jesteros-userspace
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start JesterOS userspace services
# Description:       Starts the medieval-themed JesterOS userspace services
#                    for the Nook writing environment (no kernel modules)
### END INIT INFO

# Init script for JesterOS userspace services
# Compatible with SysV init systems
# NOTE: JesterOS is entirely userspace - no kernel modules!

PATH=/sbin:/bin:/usr/sbin:/usr/bin
NAME=jesteros-userspace
DESC="JesterOS Medieval Userspace Services"
SCRIPTNAME=/etc/init.d/$NAME
MODULE_DIR=/lib/modules/2.6.29
PIDFILE=/var/run/jesteros.pid
LOADED_MARKER=/var/run/jesteros.loaded

# Load init functions if available
[ -r /lib/lsb/init-functions ] && . /lib/lsb/init-functions

# Module list in load order (DEPRECATED - JesterOS is userspace only!)
# MODULES="jesteros_core jester typewriter wisdom"

#
# Function to load a module (DEPRECATED - kept for compatibility)
#
load_module() {
    # JesterOS is now userspace only - this function does nothing
    return 0
}

#
# Function to unload a module
#
unload_module() {
    local module=$1
    
    if lsmod | grep -q "^$module "; then
        echo -n "  Unloading $module... "
        if rmmod "$module" 2>/dev/null; then
            echo "OK"
            return 0
        else
            echo "FAILED"
            return 1
        fi
    else
        echo "  Module $module not loaded"
        return 0
    fi
}

#
# Start function
#
do_start() {
    echo "Starting $DESC..."
    
    # Check if already loaded
    if [ -f "$LOADED_MARKER" ]; then
        echo "  JesterOS modules already loaded"
        return 0
    fi
    
    # Load each module
    for module in $MODULES; do
        load_module "$module"
    done
    
    # Check if userspace services created /var/jesteros
    if [ -d "/var/jesteros" ]; then
        echo "  JesterOS interface ready at /var/jesteros"
        
        # Show jester greeting
        if [ -f "/var/jesteros/jester" ]; then
            echo ""
            echo "The Court Jester awakens:"
            cat /var/jesteros/jester
            echo ""
        fi
        
        # Mark as loaded
        touch "$LOADED_MARKER"
        echo "JesterOS modules started successfully"
        return 0
    else
        echo "Failed to create /var/jesteros interface"
        return 1
    fi
}

#
# Stop function
#
do_stop() {
    echo "Stopping $DESC..."
    
    # Unload modules in reverse order
    for module in wisdom typewriter jester jesteros_core; do
        unload_module "$module"
    done
    
    # Remove marker
    rm -f "$LOADED_MARKER"
    
    echo "JesterOS modules stopped"
    return 0
}

#
# Status function
#
do_status() {
    echo "Checking $DESC status..."
    
    if [ -f "$LOADED_MARKER" ]; then
        echo "  Status: RUNNING"
        
        # Check each module
        for module in $MODULES; do
            if lsmod | grep -q "^$module "; then
                echo "    [OK] $module"
            else
                echo "    [--] $module"
            fi
        done
        
        # Check /proc interface
        if [ -d "/var/jesteros" ]; then
            echo "  /var/jesteros: AVAILABLE"
            [ -f "/var/jesteros/motto" ] && echo "    - motto: OK"
            [ -f "/var/jesteros/version" ] && echo "    - version: OK"
            [ -f "/var/jesteros/jester" ] && echo "    - jester: OK"
            [ -f "/var/jesteros/wisdom" ] && echo "    - wisdom: OK"
            [ -d "/var/jesteros/typewriter" ] && echo "    - typewriter: OK"
        else
            echo "  /var/jesteros: NOT FOUND"
        fi
        
        return 0
    else
        echo "  Status: STOPPED"
        return 3
    fi
}

#
# Main case statement
#
case "$1" in
    start)
        do_start
        ;;
    stop)
        do_stop
        ;;
    restart|force-reload)
        echo "Restarting $DESC..."
        do_stop
        sleep 1
        do_start
        ;;
    status)
        do_status
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|status}" >&2
        exit 3
        ;;
esac

exit 0